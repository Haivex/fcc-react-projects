{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initializeState","isFunction","isZero","isNumber","isMinus","isDot","formulaValue","displayValue","prevOp","isEqual","App","props","state","concatNumber","bind","reset","addOperation","addDotToNumber","result","this","setState","event","targetText","target","innerText","tempFormula","slice","sign","value","displayValue2","parseFloat","notnaned","isNaN","tempForm","match","substring","length","console","log","newArray0","split","filter","el","newArray","map","Number","indexOf","deletedIndex","splice","forEach","operation","resultNumber","id","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9f26e42.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst initializeState = {\n  isFunction: false,\n  isZero: true,\n  isNumber: true,\n  isMinus: false,\n  isDot: false,\n  formulaValue: \"0\",\n  displayValue: \"0\",\n  prevOp: \"\",\n  isEqual: false,\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = initializeState\n\n    this.concatNumber = this.concatNumber.bind(this);\n    this.reset = this.reset.bind(this);\n    this.addOperation = this.addOperation.bind(this);\n    this.addDotToNumber = this.addDotToNumber.bind(this);\n    this.result = this.result.bind(this);\n  }\n\n  async reset() {\n    await this.setState(initializeState);\n  }\n\n     async concatNumber(event) {\n      let targetText = event.target.innerText\n\n      if(this.state.isZero) {\n        if(targetText === \"0\")  {\n          await this.setState({\n            isZero: true\n            })\n            return\n        }\n\n        if(this.state.displayValue === \"0\") {\n          let tempFormula = this.state.formulaValue.slice(0, -1) + targetText\n          await this.setState({\n            displayValue: targetText,\n            formulaValue: tempFormula,\n            isZero: false,\n            isEqual: false,\n            })\n            return\n        }\n\n      }\n       if(this.state.isFunction) {\n         await this.setState({\n          isFunction: false,\n          displayValue: targetText,\n          formulaValue: this.state.formulaValue + targetText,\n          isNumber: true,\n          isEqual: false,\n          isMinus: false,\n          prevOp: \"\"\n         })\n       }\n       else {\n        await this.setState({\n          isNumber: true,\n          isEqual: false,\n          isMinus: false,\n          displayValue: this.state.displayValue + targetText,\n          formulaValue: this.state.formulaValue + targetText,\n          prevOp: \"\"\n        })\n       }\n     \n\n   \n\n\n\n  }\n    \n  async addDotToNumber() {\n    if(!this.state.isNumber) {\n      await this.setState({\n        displayValue: \"0.\",\n        formulaValue: this.state.formulaValue + \"0.\",\n        isNumber: true,\n        isFunction: false,\n        isZero: false,\n        isMinus: false,\n        isDot: true,\n        prevOp: \"\",\n        isEqual: false,\n      })\n      return\n    }\n    if(this.state.isDot) {\n      return\n    }\n   await this.setState({\n      displayValue: this.state.displayValue + \".\",\n      formulaValue: this.state.formulaValue + \".\",\n      isEqual: false,\n      isNumber: true,\n      isFunction: false,\n      isZero: false,\n      isDot: true,\n      prevOp: \"\",\n    })\n  }\n\n  async addOperation(event) {\n\n    let sign = event.target.value\n    let {displayValue, formulaValue} = this.state\n    let displayValue2 = parseFloat(displayValue)\n\n    let notnaned = false\n    if(!isNaN(displayValue2)) {\n      notnaned = true\n    }\n    \n    if(notnaned) {\n     await this.setState({\n        \n        displayValue: sign,\n        formulaValue: formulaValue + sign,\n        isFunction: true,\n        isZero: false,\n        isNumber: false,\n        isDot: false,\n        isEqual: false,\n        prevOp: sign\n      })\n      return\n    }\n    else {\n    if(this.state.prevOp === \"\") {\n\n      await this.setState({\n        displayValue: sign,\n        formulaValue: this.state.formulaValue + sign,\n        prevOp: sign,\n        isEqual: false,\n      }) \n      return\n    }\n    else {\n      if(this.state.prevOp !== \"-\" && sign === \"-\") {\n        await this.setState({\n        displayValue: sign,\n        formulaValue: this.state.formulaValue + sign,\n        prevOp: sign,\n        isMinus: true,\n        isEqual: false,\n      })\n        return\n      }\n      else if (this.state.prevOp !== \"-\" && sign !== \"-\") {\n        let tempForm = this.state.formulaValue.slice(0, -1) + sign\n        await this.setState({\n          displayValue: sign,\n          formulaValue: tempForm,\n          prevOp: sign,\n          isEqual: false,\n        })\n        return\n      }\n      else {\n        let tempForm = this.state.formulaValue.slice(0, -2) + sign\n        await this.setState({\n          displayValue: sign,\n          formulaValue: tempForm,\n          prevOp: sign,\n          isEqual: false,\n        })\n        return\n      }\n\n    }\n    }\n  }\n\n async result() {\n  let {formulaValue} = this.state\n  if(this.state.isEqual) {\n    await this.setState({\n      isFunction: false,\n      isNumber: true,\n      isMinus: false,\n      isDot: false,\n      prevOp: \"\",\n    })\n    return\n  }\n   \n  if(this.state.displayValue.match(/[\\-\\*\\:\\+]/)) {\n    formulaValue = formulaValue.substring(0, formulaValue.length - 1);\n  }\n\n  console.log(formulaValue)\n\n    let newArray0 = formulaValue.split(/([\\-\\*\\:\\+])/g)\n    console.log(newArray0)\n    newArray0 = newArray0.filter(function (el) {\n      return el != \"\";\n    });\n\n    console.log(newArray0)\n    let newArray = newArray0.map((el) => {\n\n      if(isNaN(Number(el))) {\n        return el\n      }\n      else {\n        return Number(el)\n      }\n    })\n\n    //console.log(\"New array with numbers\", newArray)\n\n      while(newArray.indexOf(\"-\") != -1 && isNaN(Number(newArray[newArray.indexOf(\"-\") - 1]))) {\n      let deletedIndex = newArray.indexOf(\"-\");\n      newArray.splice(newArray.indexOf(\"-\"), 1);\n      newArray[ deletedIndex] = newArray[ deletedIndex] * -1;\n      console.log(\"Deleted and new:\", newArray);\n    }\n\n    // Tutaj ogarnac dzialanie 5* -5 i 2/7 i 4*-* i 5 +* 7(to laguje)\n    let symbols = [\":\", \"*\", \"-\", \"+\"]\n    symbols.forEach((el) => {\n      while(newArray.indexOf(el) != -1)\n    {\n    let operation = newArray.indexOf(el)\n    let resultNumber\n    \n    switch(el) {\n      case \":\":\n        resultNumber = newArray[operation - 1] / newArray[operation + 1]\n        break;\n        case \"*\":\n          resultNumber = newArray[operation - 1] * newArray[operation + 1]\n          break;\n          case \"-\":\n            resultNumber = newArray[operation - 1] - newArray[operation + 1]\n            break;\n            case \"+\":\n            resultNumber = newArray[operation - 1] + newArray[operation + 1]\n            break;\n    }\n\n    newArray.splice(operation - 1, 3, resultNumber)\n    \n    console.log(\"Deleted sign\", newArray)\n    \n    }\n    })\n\n    newArray[0] = newArray[0]+\"\"\n\n    await this.setState({\n      displayValue: newArray[0],\n      formulaValue: newArray[0],\n      isFunction: false,\n      isZero: newArray[0] === \"0\" ? true : false,\n      prevOp: \"\",\n      isEqual: true,\n      isNumber: true,\n      isMinus: false,\n      isDot: false,\n      prevOp: \"\",\n    })\n    console.log(\"Final\", this.state.displayValue)\n  }\n  \n\n\n  render() {\n    return (\n      <div id=\"calculator\">\n        <span id=\"formula\">{this.state.formulaValue}</span>\n        <span id=\"display\">{this.state.displayValue}</span>\n        <button id=\"clear\" onClick={this.reset}>C</button>\n        <button id=\"equals\" onClick={this.result}>=</button>\n        <button id=\"zero\" onClick={this.concatNumber}>0</button>\n        <button id=\"one\" onClick={this.concatNumber}>1</button>\n        <button id=\"two\" onClick={this.concatNumber}>2</button>\n        <button id=\"three\" onClick={this.concatNumber}>3</button>\n        <button id=\"four\" onClick={this.concatNumber}>4</button>\n        <button id=\"five\" onClick={this.concatNumber}>5</button>\n        <button id=\"six\" onClick={this.concatNumber}>6</button>\n        <button id=\"seven\" onClick={this.concatNumber}>7</button>\n        <button id=\"eight\" onClick={this.concatNumber}>8</button>\n        <button id=\"nine\" onClick={this.concatNumber}>9</button>\n        <button id=\"add\" value=\"+\" onClick={this.addOperation}>+</button>\n        <button id=\"subtract\" value=\"-\" onClick={this.addOperation}>-</button>\n        <button id=\"multiply\" value=\"*\" onClick={this.addOperation}>*</button>\n        <button id=\"divide\" value=\":\" onClick={this.addOperation}>:</button>\n        <button id=\"decimal\" onClick={this.addDotToNumber}>.</button>\n      </div>\n      );\n     }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}