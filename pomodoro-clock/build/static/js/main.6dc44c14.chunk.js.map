{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initializeState","breakLength","sessionLength","currentPhase","isPause","timeToLeft","displayedTime","App","props","state","reset","bind","sessionIncrement","sessionDecrement","breakIncrement","breakDecrement","startStop","changeDisplay","this","audioBeep","pause","currentTime","setState","minutes","minutesToDisplay","play","changeTime","Math","trunc","seconds","playAlarm","handleTimer","setInterval","clearInterval","id","onClick","preload","ref","audio","type","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6dc44c14.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst initializeState = {\n  breakLength: 5,\n  sessionLength: 25,\n  currentPhase: \"Session\",\n  isPause: true,\n  timeToLeft: 1500,\n  displayedTime: \"25:00\"\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = initializeState\n\n    this.reset = this.reset.bind(this);\n    this.sessionIncrement = this.sessionIncrement.bind(this);\n    this.sessionDecrement = this.sessionDecrement.bind(this);\n    this.breakIncrement = this.breakIncrement.bind(this);\n    this.breakDecrement = this.breakDecrement.bind(this);\n    this.startStop = this.startStop.bind(this);\n    this.changeDisplay = this.changeDisplay.bind(this);\n  }\n\nreset() {\n  this.audioBeep.pause()\n  this.audioBeep.currentTime = 0\n  this.setState(initializeState)\n}\n\nsessionIncrement() {\n  if(this.state.sessionLength >= 60) {\n    return\n  }\n\n  let {sessionLength} = this.state\n\n  let minutes = sessionLength + 1\n  let seconds = 0\n\n  let minutesToDisplay = minutes < 10 ? \"0\"+minutes : minutes\n  let secondsToDisplay = seconds < 10 ? \"0\"+seconds : seconds\n\n  let displayedTime = minutesToDisplay+\":\"+secondsToDisplay\n\n  this.setState({\n    sessionLength: sessionLength + 1,\n    displayedTime: displayedTime,\n    timeToLeft: (sessionLength + 1) * 60\n  })\n}\n\n\nsessionDecrement() {\n  if(this.state.sessionLength <= 1) {\n    return\n  }\n\n  let {sessionLength} = this.state\n\n  let minutes = sessionLength - 1\n  let seconds = 0\n\n  let minutesToDisplay = minutes < 10 ? \"0\"+minutes : minutes\n  let secondsToDisplay = seconds < 10 ? \"0\"+seconds : seconds\n\n  let displayedTime = minutesToDisplay+\":\"+secondsToDisplay\n\n  this.setState({\n    sessionLength: sessionLength - 1,\n    displayedTime: displayedTime,\n    timeToLeft: (sessionLength - 1) * 60\n  })\n\n}\n\nplayAlarm() {\n  this.audioBeep.play()\n}\n\nbreakIncrement() {\n  if(this.state.breakLength >= 60) {\n    return\n  }\n  this.setState({\n    breakLength: this.state.breakLength + 1\n  })\n}\n\nbreakDecrement() {\n  if(this.state.breakLength <= 1) {\n    return\n  }\n  this.setState({\n    breakLength: this.state.breakLength - 1\n  })\n}\n\nstartStop() {\n  this.setState({\n    isPause: !this.state.isPause\n  }, this.changeTime())\n}\n\nchangeDisplay() {\n  let {timeToLeft} = this.state\n\n  let minutes = Math.trunc(timeToLeft / 60)\n  let seconds = timeToLeft - (minutes * 60)\n\n  let minutesToDisplay = minutes < 10 ? \"0\"+minutes : minutes\n  let secondsToDisplay = seconds < 10 ? \"0\"+seconds : seconds\n\n  let displayedTime = minutesToDisplay+\":\"+secondsToDisplay\n\n  this.setState({\n    displayedTime: displayedTime\n  })\n\n  if(timeToLeft == 0) {\n    if(this.state.currentPhase == \"Session\") {\n      this.setState({\n        currentPhase: \"Break\",\n        timeToLeft: (this.state.breakLength) * 60 + 1,\n      })\n    }\n    else {\n      this.setState({\n        currentPhase: \"Session\",\n        timeToLeft: (this.state.sessionLength) * 60 + 1,\n      })\n    }\n    this.playAlarm()\n  }\n}\n\n//tutaj\n  changeTime() {\n  let handleTimer = setInterval(() => {\n\n    if(this.state.isPause) {\n      clearInterval(handleTimer);\n      return;\n    }\n\n    let {timeToLeft} = this.state\n\n    this.setState({\n      timeToLeft: timeToLeft - 1\n    })\n\n    this.changeDisplay();\n\n  }, 1000)\n}\n\n  render() {\n    return (\n      <div id=\"pomodoro\">\n\n        <div id=\"break-container\">\n          <label id=\"break-label\">Break Length</label>\n          <button id=\"break-increment\" onClick={this.breakIncrement}>^</button>\n          <span id=\"break-length\">{this.state.breakLength}</span>\n          <button id=\"break-decrement\" onClick={this.breakDecrement}>v</button>\n        </div>\n       \n        <div id=\"session-container\">\n          <label id=\"session-label\">Session Length</label>\n          <button id=\"session-increment\" onClick={this.sessionIncrement}>^</button>\n          <span id=\"session-length\">{this.state.sessionLength}</span>\n          <button id=\"session-decrement\" onClick={this.sessionDecrement}>v</button>\n        </div>\n\n        <div id=\"timer\">\n          <label id=\"timer-label\">{this.state.currentPhase}</label>\n          <span id=\"time-left\">{this.state.displayedTime}</span>\n        </div>\n\n        <div id=\"controls\">\n          <button id=\"start_stop\" onClick={this.startStop}>Start/Stop</button>\n          <button id=\"reset\" onClick={this.reset}>Reset</button>\n          <audio id=\"beep\" preload=\"auto\" ref={(audio) => {\n            this.audioBeep = audio;\n          }} type=\"audio/mpeg\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></audio>\n        </div>\n\n      </div>\n      );\n     }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}